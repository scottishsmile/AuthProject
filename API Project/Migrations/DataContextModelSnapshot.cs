// <auto-generated />
using System;
using API_Project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API_Project.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API_Project.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccountLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateEmailVerifySent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLocked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePassResetEmailSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerifyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForgotPass")
                        .HasColumnType("bit");

                    b.Property<int>("LoginTries")
                        .HasColumnType("int");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("basic");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountLocked = false,
                            DateEmailVerifySent = new DateTime(2022, 3, 21, 7, 54, 24, 74, DateTimeKind.Utc).AddTicks(7941),
                            DateLocked = new DateTime(2022, 3, 21, 7, 54, 24, 74, DateTimeKind.Utc).AddTicks(9673),
                            DatePassResetEmailSent = new DateTime(2022, 3, 21, 7, 54, 24, 74, DateTimeKind.Utc).AddTicks(6692),
                            Email = "admin@admin.com",
                            EmailVerified = true,
                            ForgotPass = false,
                            LoginTries = 0,
                            Newsletter = false,
                            PasswordHash = new byte[] { 19, 81, 84, 123, 251, 77, 122, 194, 45, 110, 235, 113, 199, 154, 245, 67, 230, 34, 168, 152, 222, 114, 161, 221, 79, 61, 87, 50, 142, 165, 2, 173, 200, 118, 74, 100, 112, 34, 218, 12, 149, 98, 149, 48, 236, 117, 78, 88, 64, 61, 127, 25, 134, 203, 29, 1, 32, 153, 201, 229, 28, 183, 101, 80 },
                            PasswordSalt = new byte[] { 160, 231, 159, 116, 50, 214, 97, 64, 72, 16, 214, 73, 56, 209, 35, 228, 30, 150, 76, 132, 192, 140, 174, 89, 36, 99, 248, 14, 115, 116, 186, 48, 92, 28, 201, 186, 255, 88, 227, 235, 7, 192, 167, 220, 223, 104, 114, 202, 33, 74, 204, 178, 216, 30, 169, 167, 157, 207, 40, 37, 111, 242, 141, 38, 253, 138, 197, 224, 210, 112, 132, 163, 138, 77, 155, 116, 170, 174, 68, 236, 113, 148, 48, 201, 220, 85, 168, 200, 45, 35, 201, 212, 3, 211, 194, 116, 188, 241, 189, 142, 88, 148, 170, 47, 185, 90, 151, 50, 118, 80, 19, 111, 131, 207, 135, 181, 132, 206, 95, 192, 249, 167, 78, 132, 198, 238, 52, 208 },
                            Role = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccountLocked = false,
                            DateEmailVerifySent = new DateTime(2022, 3, 21, 7, 54, 24, 75, DateTimeKind.Utc).AddTicks(132),
                            DateLocked = new DateTime(2022, 3, 21, 7, 54, 24, 75, DateTimeKind.Utc).AddTicks(134),
                            DatePassResetEmailSent = new DateTime(2022, 3, 21, 7, 54, 24, 75, DateTimeKind.Utc).AddTicks(128),
                            Email = "basic_test@test1222.com",
                            EmailVerified = true,
                            ForgotPass = false,
                            LoginTries = 0,
                            Newsletter = false,
                            PasswordHash = new byte[] { 19, 81, 84, 123, 251, 77, 122, 194, 45, 110, 235, 113, 199, 154, 245, 67, 230, 34, 168, 152, 222, 114, 161, 221, 79, 61, 87, 50, 142, 165, 2, 173, 200, 118, 74, 100, 112, 34, 218, 12, 149, 98, 149, 48, 236, 117, 78, 88, 64, 61, 127, 25, 134, 203, 29, 1, 32, 153, 201, 229, 28, 183, 101, 80 },
                            PasswordSalt = new byte[] { 160, 231, 159, 116, 50, 214, 97, 64, 72, 16, 214, 73, 56, 209, 35, 228, 30, 150, 76, 132, 192, 140, 174, 89, 36, 99, 248, 14, 115, 116, 186, 48, 92, 28, 201, 186, 255, 88, 227, 235, 7, 192, 167, 220, 223, 104, 114, 202, 33, 74, 204, 178, 216, 30, 169, 167, 157, 207, 40, 37, 111, 242, 141, 38, 253, 138, 197, 224, 210, 112, 132, 163, 138, 77, 155, 116, 170, 174, 68, 236, 113, 148, 48, 201, 220, 85, 168, 200, 45, 35, 201, 212, 3, 211, 194, 116, 188, 241, 189, 142, 88, 148, 170, 47, 185, 90, 151, 50, 118, 80, 19, 111, 131, 207, 135, 181, 132, 206, 95, 192, 249, 167, 78, 132, 198, 238, 52, 208 },
                            Role = "basic",
                            Username = "basic_test"
                        },
                        new
                        {
                            Id = 3,
                            AccountLocked = false,
                            DateEmailVerifySent = new DateTime(2022, 3, 21, 7, 54, 24, 75, DateTimeKind.Utc).AddTicks(136),
                            DateLocked = new DateTime(2022, 3, 21, 7, 54, 24, 75, DateTimeKind.Utc).AddTicks(138),
                            DatePassResetEmailSent = new DateTime(2022, 3, 21, 7, 54, 24, 75, DateTimeKind.Utc).AddTicks(135),
                            Email = "premium_test@test122.com",
                            EmailVerified = true,
                            ForgotPass = false,
                            LoginTries = 0,
                            Newsletter = false,
                            PasswordHash = new byte[] { 19, 81, 84, 123, 251, 77, 122, 194, 45, 110, 235, 113, 199, 154, 245, 67, 230, 34, 168, 152, 222, 114, 161, 221, 79, 61, 87, 50, 142, 165, 2, 173, 200, 118, 74, 100, 112, 34, 218, 12, 149, 98, 149, 48, 236, 117, 78, 88, 64, 61, 127, 25, 134, 203, 29, 1, 32, 153, 201, 229, 28, 183, 101, 80 },
                            PasswordSalt = new byte[] { 160, 231, 159, 116, 50, 214, 97, 64, 72, 16, 214, 73, 56, 209, 35, 228, 30, 150, 76, 132, 192, 140, 174, 89, 36, 99, 248, 14, 115, 116, 186, 48, 92, 28, 201, 186, 255, 88, 227, 235, 7, 192, 167, 220, 223, 104, 114, 202, 33, 74, 204, 178, 216, 30, 169, 167, 157, 207, 40, 37, 111, 242, 141, 38, 253, 138, 197, 224, 210, 112, 132, 163, 138, 77, 155, 116, 170, 174, 68, 236, 113, 148, 48, 201, 220, 85, 168, 200, 45, 35, 201, 212, 3, 211, 194, 116, 188, 241, 189, 142, 88, 148, 170, 47, 185, 90, 151, 50, 118, 80, 19, 111, 131, 207, 135, 181, 132, 206, 95, 192, 249, 167, 78, 132, 198, 238, 52, 208 },
                            Role = "premium",
                            Username = "premium_test"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
